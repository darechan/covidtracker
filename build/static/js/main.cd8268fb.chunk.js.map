{"version":3,"sources":["components/Cards/Cards.jsx","components/Table/Table.jsx","utilities/util.js","components/Graph/Graph.jsx","App.js","serviceWorker.js","index.js"],"names":["Cards","title","cases","total","Card","className","CardContent","Typography","color","variant","start","end","duration","Table","countries","map","country","sortData","data","sortedData","sort","a","b","buildChartData","casesType","lastDataPoint","chartData","date","newDataPoint","x","y","push","options","legend","display","elements","point","radius","maintainAspectRatio","tooltips","mode","intersect","callbacks","label","tooltipItem","numeral","value","format","scales","xAxes","type","time","tooltipFormat","yAxes","gridLines","ticks","callback","index","values","Graph","useState","setData","useEffect","fetch","then","response","json","fetchData","length","datasets","backgroundColor","borderColor","App","setCountries","setCountry","countryInfo","setCountryInfo","tableData","setTableData","name","iso3","flag","getCountries","onCountryChange","event","countryCode","target","url","console","log","FormControl","Select","onChange","MenuItem","src","width","height","Grid","container","spacing","item","md","xs","todayCases","todayRecovered","recovered","todayDeaths","deaths","active","onClick","window","open","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.cd8268fb.chunk.js","sourcesContent":["import React from 'react';\r\nimport CountUp from 'react-countup';\r\nimport './Cards.module.css';\r\n\r\n//Material UI \r\nimport { Card, CardContent, Typography } from '@material-ui/core';\r\n\r\nfunction Cards({ title, cases, total }) {\r\n    return (\r\n        <Card className=\"card\">\r\n            <CardContent>\r\n                <Typography color=\"textSecondary\" className=\"card__title\">\r\n                    {title}\r\n                </Typography>\r\n                <Typography variant=\"h2\">\r\n                    {cases}\r\n                <CountUp\r\n                        start={0}\r\n                        end={cases}\r\n                        duration={2.5}\r\n                />\r\n                </Typography>\r\n                <Typography color=\"textSecondary\" className=\"card__total\">\r\n                    Total {total}\r\n                </Typography>\r\n            </CardContent>\r\n        </Card>\r\n    )\r\n}\r\n\r\nexport default Cards\r\n","import React from 'react';\r\nimport \"./Table.css\";\r\n\r\nfunction Table({countries}) {\r\n    return (\r\n        <div className=\"table\">\r\n            {countries.map(({country, cases})=> (\r\n                <tr>\r\n                    <td> {country} </td>\r\n                    <td>\r\n                        <strong> {cases} </strong>\r\n                    </td>\r\n                </tr>\r\n            ))}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Table;\r\n","export const sortData = (data) => {\r\n    let sortedData = [...data];\r\n    sortedData.sort((a, b) => (a.cases > b.cases ? -1 : 1));\r\n    return sortedData;\r\n  };\r\n\r\nexport const buildChartData = (data, casesType) => {\r\n    let chartData = [];\r\n    let lastDataPoint;\r\n    for (let date in data.cases) {\r\n      if (lastDataPoint) {\r\n        let newDataPoint = {\r\n          x: date,\r\n          y: data[casesType][date] - lastDataPoint,\r\n        };\r\n        chartData.push(newDataPoint);\r\n      }\r\n      lastDataPoint = data[casesType][date];\r\n    }\r\n    return chartData;\r\n  };","import React, { useState, useEffect } from 'react';\r\nimport { Line } from \"react-chartjs-2\";\r\nimport { buildChartData } from \"../../utilities/util\";\r\nimport numeral from 'numeral';\r\n\r\nconst options = {\r\n    legend: {\r\n      display: false,\r\n    },\r\n    elements: {\r\n      point: {\r\n        radius: 0,\r\n      },\r\n    },\r\n    maintainAspectRatio: false,\r\n    tooltips: {\r\n      mode: \"index\",\r\n      intersect: false,\r\n      callbacks: {\r\n        label: function (tooltipItem, data) {\r\n          return numeral(tooltipItem.value).format(\"+0,0\");\r\n        },\r\n      },\r\n    },\r\n    scales: {\r\n      xAxes: [\r\n        {\r\n          type: \"time\",\r\n          time: {\r\n            format: \"MM/DD/YY\",\r\n            tooltipFormat: \"ll\",\r\n          },\r\n        },\r\n      ],\r\n      yAxes: [\r\n        {\r\n          gridLines: {\r\n            display: false,\r\n          },\r\n          ticks: {\r\n            // Include a dollar sign in the ticks\r\n            callback: function (value, index, values) {\r\n              return numeral(value).format(\"0a\");\r\n            },\r\n          },\r\n        },\r\n      ],\r\n    },\r\n  };\r\n\r\nfunction Graph({ casesType }) {\r\n    const [data, setData] = useState({});\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            await fetch(\"https://disease.sh/v3/covid-19/historical/all?lastdays=120\")\r\n                .then((response) => {\r\n                    return response.json();\r\n                })\r\n                .then((data) => {\r\n                    let chartData = buildChartData(data, casesType);\r\n                    setData(chartData);\r\n                    // console.log(chartData);\r\n                    // buildChart(chartData);\r\n                });\r\n        };\r\n\r\n        fetchData();\r\n    }, [casesType])\r\n    return (\r\n        <div>\r\n            {data?.length > 0 && (\r\n                <Line\r\n                    data={{\r\n                        datasets: [\r\n                            {\r\n                                backgroundColor: \"rgba(204, 16, 52, 0.5)\",\r\n                                borderColor: \"#CC1034\",\r\n                                data: data,\r\n                            },\r\n                        ],\r\n                    }}\r\n                    options={options}\r\n                />\r\n            )}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Graph\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { MenuItem, FormControl, Select } from \"@material-ui/core\";\r\nimport Cards from \"./components/Cards/Cards\";\r\nimport Table from \"./components/Table/Table\";\r\nimport Graph from \"./components/Graph/Graph\";\r\nimport \"./App.css\";\r\nimport { sortData } from \"./utilities/util\";\r\n//Material UI\r\nimport { Card, CardContent, Typography, Button } from \"@material-ui/core\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\n\r\nfunction App() {\r\n  const [countries, setCountries] = useState([]);\r\n  const [country, setCountry] = useState([\"worldwide\"]);\r\n  const [countryInfo, setCountryInfo] = useState({});\r\n  const [tableData, setTableData] = useState([]);\r\n  const [casesType, setCasesType] = useState(\"cases\");\r\n  useEffect(() => {\r\n    fetch(\"https://disease.sh/v3/covid-19/all\")\r\n      .then((response) => response.json())\r\n      .then((data) => {\r\n        setCountryInfo(data);\r\n      });\r\n  }, []);\r\n  useEffect(() => {\r\n    const getCountries = async () => {\r\n      await fetch(\"https://disease.sh/v3/covid-19/countries\")\r\n        .then((response) => response.json())\r\n        .then((data) => {\r\n          const countries = data.map((country) => ({\r\n            name: country.country,\r\n            value: country.countryInfo.iso3, //FR AFG IN\r\n            flag: country.countryInfo.flag,\r\n          }));\r\n          const sortedData = sortData(data);\r\n\r\n          setCountries(countries);\r\n          setTableData(sortedData);\r\n        });\r\n    };\r\n\r\n    getCountries();\r\n  }, []);\r\n\r\n  const onCountryChange = async (event) => {\r\n    const countryCode = event.target.value;\r\n    const url =\r\n      countryCode === \"worldwide\"\r\n        ? \"https://disease.sh/v3/covid-19/all\"\r\n        : `https://disease.sh/v3/covid-19/countries/${countryCode}`;\r\n    await fetch(url)\r\n      .then((response) => response.json())\r\n      .then((data) => {\r\n        setCountry(countryCode);\r\n        setCountryInfo(data);\r\n      });\r\n  };\r\n  console.log(countryInfo);\r\n  return (\r\n    <div className=\"app\">\r\n      <div className=\"app__left\">\r\n        <div className=\"app__header\">\r\n          <h1>COVID-19 Dashboard</h1>\r\n          <FormControl className=\"app__dropdown\">\r\n            <Select\r\n              variant=\"outlined\"\r\n              value={country}\r\n              onChange={onCountryChange}\r\n            >\r\n              <MenuItem value=\"worldwide\">WorldWide</MenuItem>\r\n              {countries.map((country) => (\r\n                <MenuItem value={country.value}>\r\n                  <img src={country.flag} width=\"25px\" height=\"15px\"></img>{\" \"}\r\n                  <span className=\"country__name\">{country.name}</span>{\" \"}\r\n                </MenuItem>\r\n              ))}\r\n              {/*\r\n            <MenuItem value=\"worldwide\">Option 2</MenuItem>\r\n            <MenuItem value=\"worldwide\">Option 3</MenuItem> */}\r\n            </Select>\r\n          </FormControl>\r\n        </div>\r\n        <div className=\"app__stats\">\r\n          <Grid container spacing={3}>\r\n            <Grid item md={6} xs={12}>\r\n              <Cards\r\n                className=\"infected\"\r\n                title=\"Total Cases\"\r\n                cases={countryInfo.todayCases}\r\n                total={countryInfo.cases}\r\n              ></Cards>\r\n            </Grid>\r\n            <Grid item md={6} xs={12}>\r\n              <Cards\r\n                className=\"recovered\"\r\n                title=\"Recovered Cases\"\r\n                cases={countryInfo.todayRecovered}\r\n                total={countryInfo.recovered}\r\n              ></Cards>\r\n            </Grid>\r\n            <Grid item md={6} xs={12}>\r\n              <Cards\r\n                className=\"deaths\"\r\n                title=\"Deaths\"\r\n                cases={countryInfo.todayDeaths}\r\n                total={countryInfo.deaths}\r\n              ></Cards>\r\n            </Grid>\r\n            <Grid item md={6} xs={12}>\r\n              <Cards\r\n                className=\"active\"\r\n                title=\"Active Cases\"\r\n                cases={countryInfo.active}\r\n                total={countryInfo.active}\r\n              ></Cards>\r\n            </Grid>\r\n          </Grid>\r\n        </div>\r\n        <div className=\"graph__container\">\r\n          <h3>Worldwide new {casesType}</h3>\r\n          <Graph casesType={casesType} />\r\n        </div>\r\n      </div>\r\n      <div className=\"app__right\">\r\n        <Card>\r\n          <CardContent>\r\n            <div className=\"app__information\">\r\n              <h3>Live Cases by Country</h3>\r\n              <Table countries={tableData} />\r\n            </div>\r\n          </CardContent>\r\n        </Card>\r\n        <div\r\n          className=\"button\"\r\n          onClick={() =>\r\n            window.open(\r\n              \"https://darechan.github.io/covidsnaketracker/\",\r\n              \"_blank\"\r\n            )\r\n          }\r\n        >\r\n          Play Game\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}